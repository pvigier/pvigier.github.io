<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>pvigier's blog</title>
	<link href="http://pvigier.github.io/rss.xml" rel="self"/>
	<link href="http://pvigier.github.io"/>
	<updated>2018-02-15T17:02:00+01:00</updated>
	<id>http://pvigier.github.io</id>
	<author>
		<name>Pierre Vigier</name>
		<email>pierre.vigier@ymail.com</email>
	</author>
	
		<entry>
			<title>Non empty destructors in C++</title>
			<link href="http://pvigier.github.io/2018/02/09/non-empty-destructors.html"/>
			<updated>2018-02-09T00:00:00+01:00</updated>
			<id>http://pvigier.github.io/2018/02/09/non-empty-destructors</id>
			<content type="html">&lt;p&gt;Have you already faced problems with non trivial destructors?&lt;/p&gt;

&lt;p&gt;I face one recently which was really annoying. In this article, I want to share with you my knowledge of this problem and the solutions I use to address it.&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The problem&lt;/h1&gt;

&lt;p&gt;The problem is not really that the destructor is non empty but that the destructor is non trivial: there is a release of memory or some states are changed in another part of the app.&lt;/p&gt;

&lt;p&gt;Let us take a very simple example with a class that does dynamic allocation to explain the problem:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As we allocate an integer in the constructor, the natural solution for memory management is to free it in the destructor. However, this will have terrible consequences.&lt;/p&gt;

&lt;p&gt;For instance, if we do this:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anotherA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Segmentation fault&lt;/code&gt; will occur.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because when the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function ends, the destructor of &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; is called to delete &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;anotherA&lt;/code&gt;. When &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is destroyed the memory cell to which &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;mPointer&lt;/code&gt; points to is freed. Then, when &lt;code class=&quot;highlighter-rouge&quot;&gt;anotherA&lt;/code&gt; is destroyed, we try to free the memory to which &lt;code class=&quot;highlighter-rouge&quot;&gt;anotherA&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;mPointer&lt;/code&gt; points to. But as &lt;code class=&quot;highlighter-rouge&quot;&gt;anotherA&lt;/code&gt; is a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, its &lt;code class=&quot;highlighter-rouge&quot;&gt;mPointer&lt;/code&gt; points to the same memory cell as &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;mPointer&lt;/code&gt;. Thus we try to free twice the same memory cell which causes the &lt;code class=&quot;highlighter-rouge&quot;&gt;Segmentation fault&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So the problem is that because of the copy the destructor is called twice on the same attributes.&lt;/p&gt;

&lt;p&gt;Note that the copy or move constructors are often called when we use containers. For instance, there is a copy or a move when the &lt;code class=&quot;highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;push_back&lt;/code&gt; is called.&lt;/p&gt;

</content>
		</entry>
	
		<entry>
			<title>Circular dependencies in C++</title>
			<link href="http://pvigier.github.io/2018/02/09/dependency-graph.html"/>
			<updated>2018-02-09T00:00:00+01:00</updated>
			<id>http://pvigier.github.io/2018/02/09/dependency-graph</id>
			<content type="html">&lt;p&gt;Hi guys, it has been a while since the last post.&lt;/p&gt;

&lt;p&gt;I write this short post to tell you about a small script I coded recently. You can find it &lt;a href=&quot;https://github.com/pvigier/dependency-graph&quot;&gt;here&lt;/a&gt; on my github account.&lt;/p&gt;

&lt;p&gt;Its goal is to draw the “include” dependencies between classes in a C++ project. In particular, it allows to detect circular dependencies very easily or to check the architecture of a project.&lt;/p&gt;

&lt;p&gt;You can see the output of the script on a project of mine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/pvigier/dependency-graph/raw/master/examples/example1.png&quot; alt=&quot;Dependency graph&quot; class=&quot;center-image modal-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I really like this visual representation which allows to see how classes interact.&lt;/p&gt;

&lt;p&gt;However, the true reason why I created this tool is not because I like to see beautiful graphs but because I hate circular dependencies (note that there is none in the graph above). I consider circular dependencies as design flaws. But sometimes in a large project, it could happen that accidentally I create circular dependencies …&lt;/p&gt;

</content>
		</entry>
	
		<entry>
			<title>Part 2 - Application: MNIST</title>
			<link href="http://pvigier.github.io/2017/08/13/pychain-part2-mnist.html"/>
			<updated>2017-08-13T00:00:00+02:00</updated>
			<id>http://pvigier.github.io/2017/08/13/pychain-part2-mnist</id>
			<content type="html">&lt;p&gt;In &lt;a href=&quot;/2017/07/21/pychain-part1-computational-graphs.html&quot;&gt;part 1&lt;/a&gt;, we have created a fully functional library which is able to create and train neural networks using computational graphs. We used them on very simple examples. Today, we are going to try it on a more serious problem: character recognition.&lt;/p&gt;

&lt;p&gt;We are going to use a well-known database in the machine learning and deep learning world named MNIST. The database is available on &lt;a href=&quot;http://yann.lecun.com/exdb/mnist/&quot;&gt;Yann LeCun’s website&lt;/a&gt;. If you have read a bit about neural networks before you should have already seen his name. He is a French scientist who is one of the pioneers of neural networks and inventors of convolutional neural networks and he is now the director of AI at Facebook.&lt;/p&gt;

&lt;p&gt;Character recognition is an emblematic problem for two reasons. Firstly, it is one of the first successes and industrial applications of neural networks. It was used since the 90’s to read checks. Secondly, computer vision has always been a leading application domain for neural networks.&lt;/p&gt;

&lt;p&gt;In this part, we are going to briefly discover the MNIST database. Then, we are going to train some networks on it and finally, we are going to explore a bit how a neural network works.&lt;/p&gt;

</content>
		</entry>
	
		<entry>
			<title>Part 1 - Computational graphs</title>
			<link href="http://pvigier.github.io/2017/07/21/pychain-part1-computational-graphs.html"/>
			<updated>2017-07-21T00:00:00+02:00</updated>
			<id>http://pvigier.github.io/2017/07/21/pychain-part1-computational-graphs</id>
			<content type="html">&lt;p&gt;Welcome in this big tutorial on neural networks!&lt;/p&gt;

&lt;p&gt;Our goal is to write our own deep learning framework like TensorFlow or Torch. We are going to learn in-depth how neural networks work, all the mechanics behind them.&lt;/p&gt;

&lt;p&gt;We will get our hands dirty and code everything! In this tutorial, we will use Python3 and scipy but I hope that the code and the ideas are clear enough so that you can adapt the code to your favourite language.&lt;/p&gt;

&lt;p&gt;First, I show you the plan. In this part, we are going to quickly introduce neural networks and then, we will introduce computational graphs in order to model them. In the end of this part, we are going to use our implementation to learn some non-linear functions.&lt;/p&gt;

&lt;p&gt;In the second part, we will deal with a more serious problem. We are going to build an optical character recognition system upon the &lt;a href=&quot;http://yann.lecun.com/exdb/mnist/&quot;&gt;MNIST database&lt;/a&gt;. It is a classical problem in machine learning, we have to do it.&lt;/p&gt;

&lt;p&gt;Then, we will tackle recurrent neural networks and show how to model them with our library. To apply our new knowledge, we will try to learn a formal grammar generated by an automaton.&lt;/p&gt;

&lt;p&gt;In part 4, we will go further with recurrent neural networks and introduce the well-known LSTM cell. We will briefly compare it with fully-connected recurrent neural networks.&lt;/p&gt;

&lt;p&gt;To approach part 6, some more efficient optimization algorithms are necessary. Consequently we will discuss them in part 5.&lt;/p&gt;

&lt;p&gt;Have you ever read &lt;a href=&quot;http://karpathy.github.io/2015/05/21/rnn-effectiveness/&quot;&gt;this fabulous article&lt;/a&gt; by Andrej Karpathy? Yes? Cool, because, we are going to reproduce his results with our own library in part 6. Amazing, isn’t it?&lt;/p&gt;

&lt;p&gt;Finally, parts 7 and 8 are going to be theoretical appendices for the most curious readers.&lt;/p&gt;

&lt;p&gt;Is it all? Maybe not! Stay tuned!&lt;/p&gt;

&lt;p&gt;If you are ready, let’s go!&lt;/p&gt;

</content>
		</entry>
	
		<entry>
			<title>Hello World!</title>
			<link href="http://pvigier.github.io/2017/02/14/hello-world.html"/>
			<updated>2017-02-14T00:00:00+01:00</updated>
			<id>http://pvigier.github.io/2017/02/14/hello-world</id>
			<content type="html">&lt;p&gt;Welcome on my new website!&lt;/p&gt;

&lt;p&gt;I will try to keep it up-to-date. And to write a post as soon as I have an idea or discovered anything interesting. Stay Tuned!&lt;/p&gt;

&lt;p&gt;A short word on the technologies which proudly power this website. As you can see, the website is gracefully hosted by GitHub. Thanks guys! This website is completely static, I use &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; to generate the pages. By the way, I found this &lt;a href=&quot;http://jmcglone.com/guides/github-pages/&quot;&gt;page&lt;/a&gt; very interesting to get started with Jekyll. And the design is made with &lt;a href=&quot;http://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I try &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; as commenting system. I’ve seen a lot of blogs using it and it was very easy to install. Finally, I use &lt;a href=&quot;https://www.google.com/webmasters/&quot;&gt;Google Webmasters&lt;/a&gt; and &lt;a href=&quot;https://analytics.google.com/&quot;&gt;Google Analytics&lt;/a&gt; to manage my metrics.&lt;/p&gt;

&lt;p&gt;I hope you’ll find anything interesting here!&lt;/p&gt;
</content>
		</entry>
	
</feed>